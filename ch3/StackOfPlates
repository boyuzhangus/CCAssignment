//standard solution
class SetOfStacks {
  ArrayList<Stack> stacks = new ArrayList<Stack>();
  public int size;
  public int capacity;
  public Stack getLastStack(){
    size = stacks.size();
    if (size == 0){
      return null;
    } else {
    return stacks.get(size - 1);
    }
  }
  public void push(int v){
    Stack last = getLastStack();
    if (last != null && !last.isFull()) {
      last.push(v);
    } else {
      Stack stack = new Stack(capacity);
      Stack.push(v);
      stacks.add(stack);
    }
  }
  public int pop(){
    Stack last = getLastStack();
    if(last == null) throw new EmptyStackException();
    int v = last.pop();
    if (last.size == 0) stacks.remove(stacks.size() - 1);
    return v;
  }
  //Part of Followup
  public class SetOfStacks {
    ArrayList<Stack> stacks = new ArrayList<Stack> ();
    public int capacity;
    public SetOfStacks(int capacity){
      this.capacity = capacity;
    }
    
    public Stack getLastStack() {
      if (Stacks.size() == 0) return null;
      return stacks.get(stacks.size()-1);
    }
    
    public void push(int v) {/* see earlier code*/}
    public int pop(){ /*see earlier code*/}
    public boolean isEmpty() {
      Stack last = getLastStack();
      return last == null || last.isEmpty();
    } 
    
    public int popAt(int index) {
      return leftShift(index, true);
    }
    
    public int leftShift(int index, boolean removeTop) {
      Stack stack = stacks.get(index);
      int removed_item;
      if(removeTop) removed_item stack.pop();
      else removed_item = stack.reoveBottom();
      if (Stack.isEmpty()) {
        stacks.remove(index);
      } else if(stacks.size() > index + 1){
        int v = leftShift(index + 1, false);
        stack.push(v);
      }
      return removed_item;
    }
}

    
