//Find a correct build order
Project[] findBuildOrder(String[] projects, String[][] dependencies) {
	Graph graph = buildGraph(projects, dependencies);
	return orderProjects(graph.getNodes());
}

Graph buildGraph(String[] projects, String[][] dependencies) {
	Graph graph = new Graph();
	for (String project: projects) {
		graph.createNode(project);
	}

	for (String[] dependency : dependencies){
		String first = dependency[0];
		String second = dependency[1];
		graph.addEdge(first, second);
	}

	return graph;
}

Project[] orderProjects(ArrayList<Project> projects){
	Project[] order = new Project[projects.size()];
	// Add "roots" to the build order first
	int endOfList = addNonDependent(order, projects, 0);
	int toBeProcessed = 0;
	while (toBeProcessed < order.length) {
		Project current = order[toBeProcessed];
		if (current == null) {
			return null;
		}

		//Remove myself as a dependency
		ArrayList<Project> children = current.getChildren();
		for (Project child : children) {
			child.decrementDependencies();
		}

		//Add children that have no one depending on them
		endOfList = addNonDependent(order, children, endOfList);
		toBeProcessed++;
	}

	return order;
}

int addNonDependent(Project[] order, ArrayList<Project> projects, int offset) {
	for (Project project: projects){
		if (projects.getNumberDependencies() == 0){
			order[offset] = project;
			offset++;
		}
	}
	return offset;
}

public class Graph {
	private ArrayList<Project> nodes = new ArrayList<Project>();
	private HashMap<String, Project> map = new HashMap<String, Project>();

	public Project getOrCreateNode(String name) {
		if (!map.containKey(name)) {
			Project node = new Project(name);
			nodes.add(node);
			map.put(name, node);
		}

		return map.get(name);
	}

	public void addEdge(String startName, String endName) {
		Project start = getOrCreateNode(startName);
		Project end = getOrCreateNode(endName);
		start.addNeighbor(end);
	}
	public ArrayList<Project> getNodes() { return nodes; }
}

public class Project {
	private ArrayList<Project> children = new ArrayList<Project>();
	private HashMap<String, Project> map = new HashMap<String, Project>();
	private String name;
	private int dependencies = 0;

	public Project(String n) { name = n};

	public void addNeighbor(Project node) {
		if (!map.containsKey(node.getName())) {
			children.add(node);
			node.incrementDependencie();
		}
	}

	public void incrementDependencies() {dependencies++;}
	public void decrementDependencies() {dependencies--;}

	public String getName() {return name;}
	public ArrayList<Project> getChildren(){return children;}
	public int getNumberDependencies() {return dependencies;}
}
// impletation using DFS
Stack<Project> findBuildOrder(String[] projects, String [][] dependencies){
	Graph graph = buildGraph(projects, dependencies);
	return orderProjects(graph.getNodes);
}

Stack<Project> orderProjects(ArrayList<Project> projects){
	Stack<Project> stack = new Stack<Project>();
	for(Project project: projects){
		if(project.getState() == Project.State.BLANK) {
			if (!doDFS(project, stack)) {
				return null;
			}
		}
	}
	return stack;
}

boolean doDFS(Project project, Stack<Project> stack) {
	if (project.getState() == Project.State.PARTIAL){
		return false; //cycle
	}

	if (project.getState() == Project.State.BLANK) {
		project.setState(Project.State.PARTIAL);
		ArrayList<project> children = project.getChildren();
		for (Project child : children) {
			if (!doDFS(child, stack)){
				return false;
			}
		}
		project.setState(Project.State.COMPLETE);
		stack.push(project);
	}
	return true;
}

Graph buildGraph(String[] projects, String[][]dependencies){...}
public class Graph(){...}

public class Project {
	public enum State {COMPLETE, PARTIAL, BLANK};
	private State state = State.BLANK;
	public State getState() {return state;}
	public void setState(State st) {state = st;}
}
